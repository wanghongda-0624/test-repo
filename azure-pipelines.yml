# Node.js with Vue
# Build a Node.js project that uses Vue.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main
pool:
  sha_huawei_self_hosted_prd_agent
  #vmImage: ubuntu-latest

variables:
  imageName: 'pipelines-javascript-docker'
  DOCKER_BUILDKIT: 1

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- script: |
    npm install --save less less-loader
    npm install
    npm run build
  displayName: 'npm install and build'

 task: SonarQubePrepare@5
  inputs:
    SonarQube: 'sonarQ-cdo-test'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'testrepo-vue'
    cliSources: '.'

- task: SonarQubeAnalyze@5

- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'

- bash: |
   cp -aRp $(System.DefaultWorkingDirectory)/dist/ $(System.DefaultWorkingDirectory)/Docker/
  displayName: 'Bash Script'
  env:
    path: $(System.DefaultWorkingDirectory)
    file: customerinfo_name
    test: $(customerinfo_name)
    repo: $(Build.Repository.Name)


- script: |
    systemctl start docker
    pwd
    echo $(Build.ArtifactStagingDirectory)
    echo $(sss)
    echo $(System.ArtifactsDirectory)
    echo $(System.DefaultWorkingDirectory)
- task: CopyFiles@2
  inputs:
    contents: 'dist/**'
    targetFolder: $(Build.ArtifactStagingDirectory)
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)
    artifactName: MyBuildOutputs

# - task: replacetokens@5
#   inputs:
#     rootDirectory: '$(Build.ArtifactStagingDirectory)'
#     targetFiles: '**/*/Dockerfile'
#     encoding: 'auto'
#     tokenPattern: 'default'
#     writeBOM: true
#     actionOnMissing: 'warn'
#     keepToken: false
#     actionOnNoFiles: 'continue'
#     enableTransforms: false
#     useLegacyPattern: false
#     enableTelemetry: true
- task: replacetokens@5
  inputs:
    targetFiles: '**/*/Dockerfile'
    encoding: 'auto'
    tokenPattern: 'default'
    writeBOM: true
    actionOnMissing: 'warn'
    keepToken: false
    actionOnNoFiles: 'warn'
    enableTransforms: false
    useLegacyPattern: false
    enableTelemetry: true
# - task: Docker@2
#   displayName: Build an image
#   inputs:
#     repository: $(imageName)
#     command: build
#     Dockerfile: Docker/Dockerfile
#     imageName:
- task: Docker@0
  displayName: 'Build Image'
  inputs:
    containerregistrytype: 'Container Registry'
    dockerRegistryConnection: 'gtsartifact_jfrog_io'
    #command: 'build'
    Dockerfile: Docker/Dockerfile
    imageName: 'cdocloud-docker/$(Build.Repository.Name):$(Build.BuildId)'
- task: ArtifactoryDocker@1
  inputs:
    command: 'push'
    artifactoryService: 'jrog-connection-cdo'
    targetRepo: 'cdocloud-docker'
    imageName: 'gtsartifact.jfrog.io/cdocloud-docker/$(Build.Repository.Name):$(Build.BuildId)'
    collectBuildInfo: true
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'